# -*- coding: utf-8 -*-
"""DMDW_EXP8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jvsVauuB7DbYEyqh4_RbF5TVUfvYHfnK

Height  Weight  Age   Class
1.70    65      20    Programmer
1.90    85      33    Builder
1.78    76      31    Builder
1.81    75      24    Programmer
1.81    75      35    Builder
1.73    70      75    Scientist
1.80    71      63    Scientist
1.75    69      25    Programmer

Height=1.69 ,Weight=79  ,Age=37
"""

import numpy as np

data = np.array([
    [1.70, 65, 20],
    [1.90, 85, 33],
    [1.78, 76, 31],
    [1.73, 74, 24],
    [1.81, 75, 35],
    [1.73, 70, 75],
    [1.80, 71, 63],
    [1.75, 69, 25]
])
data_class = np.array(['programmer', 'builder', 'builder', 'programmer', 'builder', 'scientist','scientist', 'programmer'])

input_point = np.array([1.69, 79, 37])

k = 3

def knn_predict(input_point, data, k):
    distances = []
    for i in range(len(data)):
        dist = ((input_point[0] - data[i][0]) ** 2 + (input_point[1] - data[i][1]) ** 2 + (input_point[2] - data[i][2]) ** 2) ** 0.5
        distances.append((data[i], dist))

    distances.sort(key=lambda x: x[1])
    neighbors = np.array(distances)[:k, 0]

    class_counts = {}
    j=0
    for neighbor in neighbors:
      c = data_class[j]
      class_counts[c] = class_counts.get(c, 0) + 1
      j+=1

    predicted_class = max(class_counts, key=class_counts.get)
    return predicted_class

predicted_class = knn_predict(input_point, data, k)
print(f"The predicted class for the data point (height=1.69, weight=79, age=37) is: {predicted_class}")