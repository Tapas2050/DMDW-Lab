# -*- coding: utf-8 -*-
"""EXP5_DMDW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSXRVnA1B68OvuI9w-Psx5NULbtR1lv3
"""

import pandas as pd
import matplotlib.pyplot as plt
import statistics as st
data = pd.read_csv("/content/Toyota.csv",usecols = ['Price','Age','KM'])
data.head(1500)

copy_data1 = data.copy()
copy_data1.fillna(0, inplace=True)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for column in copy_data1.columns:
    if copy_data1[column].dtype == 'object':
        copy_data1[column] = label_encoder.fit_transform(copy_data1[column])

def min_max_normalize(column):
    min_val = column.min()
    max_val = column.max()
    normalized_column = (column - min_val) / (max_val - min_val)
    return normalized_column

copy_data1["Price"]=min_max_normalize(copy_data1["Price"]);
copy_data1["Age"]=min_max_normalize(copy_data1["Age"]);
copy_data1["KM"]=min_max_normalize(copy_data1["KM"]);
display(copy_data1)

copy_data2 = data.copy()
copy_data2.fillna(0, inplace=True)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for column in copy_data2.columns:
    if copy_data2[column].dtype == 'object':
        copy_data2[column] = label_encoder.fit_transform(copy_data2[column])

def decimal_scaling(column):
    max_val = column.max()
    j = len(str(max_val))
    normalized_column = column / (10 ** j)
    return normalized_column

copy_data2["Price"]=decimal_scaling(copy_data2["Price"]);
copy_data2["Age"]=decimal_scaling(copy_data2["Age"]);
copy_data2["KM"]=decimal_scaling(copy_data2["KM"]);
display(copy_data2)

copy_data3 = data.copy()
copy_data3.fillna(0, inplace=True)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for column in copy_data3.columns:
    if copy_data3[column].dtype == 'object':
        copy_data3[column] = label_encoder.fit_transform(copy_data3[column])

def z_score(column):
    mean = st.mean(column)
    std_dev = st.stdev(column)
    normalized_column = abs(column - mean) / std_dev
    return normalized_column

copy_data3["Price"]=z_score(copy_data3["Price"]);
copy_data3["Age"]=z_score(copy_data3["Age"]);
copy_data3["KM"]=z_score(copy_data3["KM"]);
display(copy_data3)